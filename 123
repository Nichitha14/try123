stages:

  - stage: firststage
    jobs:

      - job: firstjob
        pool:
          vmImage: windows-latest
        steps:

          # To pass the variable FOO, write it to a file
          # While the file name doesn't matter, naming it like the variable and putting it inside the $(Pipeline.Workspace)/variables folder could be a good pattern
          - bash: |
              FOO="some value"
              mkdir -p $(Pipeline.Workspace)/variables
              echo "$FOO" > $(Pipeline.Workspace)/variables/FOO 
                           
  
  - stage: secondstage
    jobs:

      - job: secondjob
        pool:
          vmImage: windows-latest
        steps:

          # Read the variable from the file, then expose it in the job
          - bash: |
              $FOO="some value"
              FOO=$(cat $(Pipeline.Workspace)/variables/FOO)
              echo "##vso[task.setvariable variable=FOO]$FOO"              

          # Just like in the first example, we can expand the variable within Azure Pipelines itself
          - bash: echo "$(FOO)"
              $FOO="some value"
              $FOO

          # Or we can expand it within bash, reading it as environmental variable
          - bash: echo "$FOO"
              $FOO="some value"
              $FOO
